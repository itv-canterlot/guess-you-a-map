var lat = -4.2000;
var lon = 53.223;
// var data_url = "http://overpass-api.de/api/intepreter?data=way[ref=%22A709%22][highway=primary][name=%22Authur%27s%20Place%22];"

var styles = {
  'highway': {
    'motorway': new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: 'rgba(32, 65, 153, 1)',
        width: 8
      })
    }),
      'trunk': new ol.style.Style({
        stroke: new ol.style.Stroke({
          color: 'rgba(39, 144, 153, 1)',
          width: 8
        })
      }),
    'primary': new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: 'rgba(201, 43, 24, 1)',
        width: 8
      })
    }),
    'secondary': new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: 'rgba(242, 102, 45, 1)',
        width: 8
      })
    }),
    'tertiary': new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: 'rgba(125, 125, 125, 1)',
        width: 8
      })
    }),
    'unclassified': new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: 'rgba(125, 125, 125, 1)',
        width: 6
      })
    }),
    'residential': new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: 'rgba(125, 125, 125, 1)',
        width: 4
      })
    }),
    'service': new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: 'rgba(0, 0, 0, 1)',
        width: 2
      })
    }),
    'footway': new ol.style.Style({
      stroke: new ol.style.Stroke({
        lineDash: [5],
        color: 'rgba(45, 145, 111, 1)',
        width: 2
      })
    })
  },
  'railway': {
    'rail': new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: 'rgba(100, 100, 100, 1)',
        width: 2
      })
    })
  }
}

var osm = new ol.layer.Tile({
  source: new ol.source.OSM()
})

var osm_no_labels = new ol.layer.Tile({
  source: new ol.source.OSM({
    url: "http://a.www.toolserver.org/tiles/osm-no-labels/{z}/{x}/{y}.png",
    crossOrigin: null
  })
})



var vectorSource = new ol.source.Vector({
  format: new ol.format.OSMXML(),
  loader: function(extent, resolution, projection) {
    var epsg4326Extent =
        ol.proj.transformExtent(extent, projection, 'EPSG:4326');
    var client = new XMLHttpRequest();
    client.open('POST', 'https://overpass.kumi.systems/api/interpreter');
    client.addEventListener('load', function() {
      var features = new ol.format.OSMXML().readFeatures(client.responseText, {
        featureProjection: map.getView().getProjection()
      });
      vectorSource.addFeatures(features);
    });
    var query = '(node(' +
        epsg4326Extent[1] + ',' + epsg4326Extent[0] + ',' +
        epsg4326Extent[3] + ',' + epsg4326Extent[2] +
        ');rel(bn)->.foo;way(bn);node(w)->.foo;rel(bw););out meta;';
    client.send(query);
  },
  strategy: ol.loadingstrategy.bbox
});

// var roads = [];
// function getRoads() {
// vectorSource.forEachFeature(function(feature) {
//   var featureIndex = feature.getId();
//   console.log(featureIndex);
// });
// }

// for (var name in roads) {
//   console.log(name);
// }

var vectors = new ol.layer.Vector({
  source: vectorSource,
  style: function(feature) {
    for (var key in styles) {
      var value = feature.get(key);
      if (value !== undefined) {
        for (var regexp in styles[key]) {
          if (new RegExp(regexp).test(value)) {
            return styles[key][regexp];
          }
        }
      }
    }
    return null;
  }
});

var map = new ol.Map({
  target: 'map',
  layers: [osm, vectors],
  // layers: [vectors],
  view: new ol.View({
    center: ol.proj.fromLonLat([lat, lon]),
    maxZoom: 16,
    zoom: 16,
    minZoom: 16
  })
});
